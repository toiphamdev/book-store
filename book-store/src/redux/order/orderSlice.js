import { createSlice } from "@reduxjs/toolkit";
import { message } from "antd";

const initialState = {
  carts: [],
  isLoading: [],
  hello: true,
};

export const orderSlice = createSlice({
  name: "order",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    doAddToCartAction: (state, action) => {
      const carts = state.carts;

      const existIndex = carts.findIndex(
        (item) => item._id === action.payload?._id
      );
      if (existIndex !== -1) {
        carts[existIndex] = {
          ...action.payload,
          quantity:
            state.carts[existIndex].quantity +
              parseInt(action.payload?.quantity) >
            state.carts[existIndex].detail?.quantity
              ? state.carts[existIndex].detail?.quantity
              : state.carts[existIndex].quantity +
                parseInt(action.payload?.quantity),
        };
      } else {
        carts.push(action.payload);
      }
      state.carts = carts;
      message.success("Sản phẩm đã được thêm vào Giỏ hàng");
    },
    doChangeCartItem: (state, action) => {
      const carts = state.carts;
      const existIndex = carts.findIndex(
        (item) => item._id === action.payload?._id
      );
      if (existIndex !== -1) {
        if (parseInt(action.payload?.quantity) > 0) {
          carts[existIndex] = {
            ...action.payload,
            quantity:
              parseInt(action.payload?.quantity) >
              state.carts[existIndex].detail?.quantity
                ? state.carts[existIndex].detail?.quantity
                : parseInt(action.payload?.quantity),
          };
          console.log(carts[existIndex]);
        } else {
          carts[existIndex] = { ...action.payload, quantity: 0 };
        }
        state.carts = carts;
      }
    },
    doDeleteCartItem: (state, action) => {
      const carts = state.carts;
      const newCarts = carts.filter((item) => item._id !== action.payload);
      state.carts = newCarts;
    },
    doPlaceOrder: (state, action) => {
      state.carts = [];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const {
  doAddToCartAction,
  doChangeCartItem,
  doDeleteCartItem,
  doPlaceOrder,
} = orderSlice.actions;

export default orderSlice.reducer;
